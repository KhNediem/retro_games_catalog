version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DB_HOST=database
      - DB_USER=retro_user
      - DB_PASSWORD=retro_password
      - DB_NAME=retro_games_catalog
      - PORT=3000
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/platforms"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Database service
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=retro_password
      - MYSQL_DATABASE=retro_games_catalog
      - MYSQL_USER=retro_user
      - MYSQL_PASSWORD=retro_password
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pretro_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
  # Image processor service (Python consumer)
  image-processor:
    build:
      context: ./image-processor
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - BACKEND_URL=http://backend:3000
    volumes:
      - processed-images:/app/processed
    networks:
      - app-network
    restart: unless-stopped
    
  # Metadata enricher service (Python consumer)
  metadata-enricher:
    build:
      context: ./metadata-enricher
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - BACKEND_URL=http://backend:3000
    networks:
      - app-network
    restart: unless-stopped

# Define networks
networks:
  app-network:
    driver: bridge

# Define volumes
volumes:
  mysql-data:
    driver: local
  rabbitmq-data:
    driver: local
  processed-images:
    driver: local
